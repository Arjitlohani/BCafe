@using BCafe.Data
@page "/OrdersList"

<h1>Orders</h1>
<button class="btn btn-primary" @onclick="ShowAddOrderModal">Add Order</button>

<table class="table" >
    <thead>
        <tr>
            <th>ID</th>
            <th>Coffee</th>
            <th>Add-Ins</th>
            <th>Coffee Price</th>
            <th>Add-Ins Price</th>
            <th>Total Price</th>
            <th>Order Date</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var order in orders)
        {
            <tr>
                <td>@order.Id</td>
                <td>@order.Coffee</td>
                <td>@order.AddIns</td>
                <td>RS.@order.CoffeePrice</td>
                <td>RS.@order.AddInsPrice</td>
                <td>RS.@order.TotalPrice</td>
                <td>@order.OrderDate.ToString("yyyy-MM-dd")</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => EditOrder(order)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteOrder(order.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (showModal)
{
    <div class="modal" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="close" @onclick="CloseModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">

                    <input type="text" class="form-control mb-2" placeholder="Customer Phone Number" @bind="editingOrder.CustomerPhoneNumber" />

                </div>

                <!-- Select for Coffee Types -->
                <p>Coffee Types</p>
                <select class="form-control mb-2" @bind-value="selectedCoffeeType" @bind-value:event="onchange">
                    <option value="">Select Coffee Type</option>
                    @foreach (var coffee in coffees)
                    {
                        <option value="@coffee.Id.ToString()">@coffee.ProductName</option>
                    }
                </select>


                <!-- Checkboxes for Add-Ins -->
                <p> Addins</p>
                @foreach (var addIn in addIns)
                {
                    <div class="form-check">
                        
                        <input type="checkbox" class="form-check-input"
                               @onchange="(e) => HandleAddInSelection(addIn.Id, e)">
                        <label class="form-check-label">@addIn.Name</label>
                    </div>
                }
                <p>Coffee Price</p>
                <input type="number" class="form-control mb-2" placeholder="CoffeePrice" @bind="editingOrder.CoffeePrice" />
                <p> Addins price</p>
                <input type="number" class="form-control mb-2" placeholder="AddInsPrice" @bind="editingOrder.AddInsPrice" />


                <!-- Display Calculated Price -->
                <p> Total Price</p>
                <input type="number" class="form-control mb-2" placeholder="Total Price" @bind="editingOrder.TotalPrice" />
            

                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="SaveOrder">ORDER</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                </div>

            </div>

            </div>

    </div>
}



@code {
    private List<Order> orders = new();
    private bool showModal = false;
    private Order editingOrder = new();
    private string modalTitle = "Add Order";
    private List<Coffee> coffees;
    private List<AddIn> addIns;
    private decimal totalPrice;
    private string _selectedCoffeeType;
    private string selectedCoffeeType
    {
        get => _selectedCoffeeType;
        set
        {
            if (_selectedCoffeeType != value)
            {
                _selectedCoffeeType = value;
                HandleCoffeeSelection();
            }
        }
    }

    private List<int> selectedAddInIds = new List<int>();
    protected override void OnInitialized()
    {
        orders = OrderService.GetAllOrders();
        coffees = CoffeeService.GetAll();
        addIns = AddInsService.GetAll();
    }

    private void ShowAddOrderModal()
    {
        editingOrder = new Order();
        modalTitle = "Add Order";
        showModal = true;
    }

    private void EditOrder(Order order)
    {
        editingOrder = order;
        modalTitle = "Edit Order";
        showModal = true;
    }

    private void HandleCoffeeSelection()
    {
        if (int.TryParse(selectedCoffeeType, out int coffeeId))
        {
            var selectedCoffee = coffees.FirstOrDefault(c => c.Id == coffeeId);
            if (selectedCoffee != null)
            {
                editingOrder.Coffee = selectedCoffee.ProductName;
                editingOrder.CoffeePrice = selectedCoffee.Price;
            }
            else
            {
                editingOrder.CoffeePrice = 0;
            }
        }

        UpdateOrderPrice();
        StateHasChanged();
    }
    private void HandleAddInSelection(int addInId, ChangeEventArgs e)
    {
        if (bool.TryParse(e.Value.ToString(), out bool isSelected))
        {
            if (isSelected && !selectedAddInIds.Contains(addInId))
            {
                selectedAddInIds.Add(addInId);
            }
            else if (!isSelected && selectedAddInIds.Contains(addInId))
            {
                selectedAddInIds.Remove(addInId);
            }

            // Update the AddIns string based on the current selection
            editingOrder.AddIns = string.Join(", ", selectedAddInIds.Select(id => addIns.FirstOrDefault(ai => ai.Id == id)?.Name));

            UpdateOrderPrice();
        }
    
}

    private void UpdateOrderPrice()
    {
        // Assuming each addIn has a Price property
        decimal addInsTotalPrice = selectedAddInIds
            .Sum(id => addIns.FirstOrDefault(ai => ai.Id == id)?.Price ?? 0);
        
        editingOrder.AddInsPrice = addInsTotalPrice;
       

        // Assuming you have already set the coffee price
        editingOrder.TotalPrice = editingOrder.CoffeePrice + addInsTotalPrice;
    }


    private void SaveOrder()
    {
        if (int.TryParse(selectedCoffeeType, out int coffeeId))
        {
            var selectedCoffee = coffees.FirstOrDefault(c => c.Id == coffeeId);
            if (selectedCoffee != null)
            {
                editingOrder.Coffee = selectedCoffee.ProductName;
                editingOrder.CoffeePrice = selectedCoffee.Price;
            }
        }
        editingOrder.OrderDate = DateTime.Now;
        if (editingOrder.Id == 0)
        {
            OrderService.AddOrder(editingOrder);
        }
        else
        {
            OrderService.UpdateOrder(editingOrder);
        }
        orders = OrderService.GetAllOrders();
        CloseModal();
        StateHasChanged();
    }

    private void DeleteOrder(int orderId)
    {
        OrderService.DeleteOrder(orderId);
        orders = OrderService.GetAllOrders();
        StateHasChanged();
    }

    private void CloseModal()
    {
        showModal = false;
        StateHasChanged();
    }
}
